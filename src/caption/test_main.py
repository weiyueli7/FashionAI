import os
import shutil
import pandas as pd
import json
from pathlib import Path
# Replace `your_module_name` with the actual filename (without .py)
from caption_generating import wrapper_function


def setup_test_environment():
    """
    Sets up a test environment by creating test directories and dummy files.
    """
    # Create test directories
    os.makedirs("data", exist_ok=True)
    os.makedirs("output", exist_ok=True)

    # Add some dummy image files
    image_1_path = Path("data/test_image1.jpg")
    image_2_path = Path("data/test_image2.png")
    with open(image_1_path, "wb") as img1, open(image_2_path, "wb") as img2:
        img1.write(b"\xFF\xD8\xFF")  # Add minimal JPEG header
        img2.write(b"\x89PNG\r\n\x1a\n")  # Add minimal PNG header


def cleanup_test_environment():
    """
    Cleans up the test environment by removing test directories and files.
    """
    shutil.rmtree("data", ignore_errors=True)
    shutil.rmtree("output", ignore_errors=True)


def validate_output():
    """
    Validates the output generated by the wrapper function.
    """
    # Check if the output folder exists
    assert os.path.exists("output"), "Output folder does not exist!"

    # Validate CSV output
    csv_path = Path("output/final_output.csv")
    assert csv_path.exists(), f"CSV output not found: {csv_path}"
    csv_data = pd.read_csv(csv_path)
    print(f"CSV Data:\n{csv_data}")

    # Validate JSON output
    json_path = Path("output/final_output.json")
    assert json_path.exists(), f"JSON output not found: {json_path}"
    with open(json_path, "r") as json_file:
        json_data = json.load(json_file)
        print(f"JSON Data:\n{json.dumps(json_data, indent=4)}")


def test_wrapper_function():
    """
    Runs the complete test by setting up, running, and validating.
    """
    try:
        print("Setting up test environment...")
        setup_test_environment()

        print("Running the wrapper function...")
        wrapper_function()

        print("Validating output...")
        validate_output()
        print("Test passed successfully!")
    except Exception as e:
        print(f"Test failed: {e}")
    finally:
        print("Cleaning up test environment...")
        cleanup_test_environment()


if __name__ == "__main__":
    test_wrapper_function()
